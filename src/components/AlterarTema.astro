<div class="dropdown dropdown-hover dropdown-end w-full md:w-auto">
  <label tabindex="0" class="flex items-center justify-between md:justify-start cursor-pointer hover:text-gray-300 w-full md:w-auto">
    <span id="theme-icon">☀️</span>
    <svg class="ml-1 w-3 h-3 fill-current" viewBox="0 0 20 20">
      <path d="M5.25 7.75L10 12.5l4.75-4.75" />
    </svg>
  </label>

  <ul class="dropdown-content menu p-0 shadow bg-base-100 text-base-content rounded-sm w-full md:w-40 -translate-y-2 
              transition transform scale-95 opacity-0 group-hover:opacity-100 group-hover:scale-100 duration-150 ease-out">
    <li><a data-set-theme="light" data-act-class="font-bold">☀️ Light</a></li>
    <li><a data-set-theme="dark" data-act-class="font-bold">🌙 Dark</a></li>
    <li><a data-set-theme="cupcake" data-act-class="font-bold">🧁 Cupcake</a></li>
  </ul>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const themeIcon = document.getElementById('theme-icon');

    function updateThemeIcon(theme) {
      if (!themeIcon) return;
      switch (theme) {
        case 'light':
          themeIcon.textContent = '☀️';
          break;
        case 'dark':
          themeIcon.textContent = '🌙';
          break;
        case 'cupcake':
          themeIcon.textContent = '🧁';
          break;
        default:
          themeIcon.textContent = '☀️';
      }
    }

    // Atualiza ícone com o tema atual ao carregar
    const currentTheme = localStorage.getItem('theme') || 'light';
    updateThemeIcon(currentTheme);

    // Observa cliques nos links de troca de tema
    document.querySelectorAll('[data-set-theme]').forEach(el => {
      el.addEventListener('click', (e) => {
        const newTheme = el.getAttribute('data-set-theme') || 'light';
        updateThemeIcon(newTheme);
      });
    });

    // Sincroniza com mudanças externas (ex.: outras abas)
    window.addEventListener('storage', (e) => {
      if (e.key === 'theme') {
        updateThemeIcon(e.newValue);
      }
    });
  });
</script>
