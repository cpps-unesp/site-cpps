---
const { textos, iniciativas, projetos = [] } = Astro.props;

const projetosData = iniciativas?.projetosLista || projetos || [];

console.log("Total de projetos:", projetosData.length);
console.log(
  "Estrutura do primeiro projeto:",
  Object.keys(projetosData[0] || {}),
);

const url = new URL(Astro.request.url);
const ordemValida = ["titulo", "docente", "periodo"];
const ordemParam = url.searchParams.get("ordem") ?? "";
const agenciaParam = url.searchParams.get("agencia") ?? "";

const ordemInicial = ordemValida.includes(ordemParam) ? ordemParam : "titulo";
const agenciaInicial = agenciaParam || "";
---

<section class="max-w-5xl mx-auto px-4 py-16 space-y-8">
  <div class="text-center mb-8">
    <h1 class="text-4xl font-bold text-primary mb-4">
      {iniciativas?.projetosDePesquisa ?? "Projetos de Pesquisa"}
    </h1>
    <p class="text-lg text-base-content max-w-3xl mx-auto">
      {
        iniciativas?.descricaoProjetosDePesquisa ??
          "Projetos desenvolvidos por docentes e associados ao CPPS."
      }
    </p>
  </div>

  <div
    class="flex flex-wrap gap-4 items-center justify-start mb-4 p-4 bg-base-200 rounded-lg"
  >
    <span class="font-semibold text-base-content">
      {iniciativas?.ordenarPor ?? "Ordenar por"}:
    </span>
    <div class="btn-group" id="ordenacao-botoes">
      <button class="btn btn-sm btn-outline" onclick="ordenarProjetos('titulo')"
        >TÃ­tulo</button
      >
      <button
        class="btn btn-sm btn-outline"
        onclick="ordenarProjetos('docente')">Docente</button
      >
      <button
        class="btn btn-sm btn-outline"
        onclick="ordenarProjetos('periodo')">PerÃ­odo</button
      >
    </div>
  </div>

  <div class="md:flex md:items-start md:justify-between gap-6 mb-8">
    <div class="w-full md:w-2/3 space-y-4">
      <div class="md:flex md:gap-4">
        <label class="form-control md:w-1/2">
          <span class="label-text">AgÃªncia de Fomento</span>
          <select id="filtro-agencia" class="select select-bordered select-sm">
            <option value="">Todas</option>
            <option value="FAPESP">FAPESP</option>
            <option value="CNPq">CNPq</option>
            <option value="CAPES">CAPES</option>
          </select>
        </label>
        <label class="form-control md:w-1/2">
          <span class="label-text">Docente ResponsÃ¡vel</span>
          <select id="filtro-docente" class="select select-bordered select-sm">
            <option value="">Todos</option>
          </select>
        </label>
      </div>

      <div class="md:flex md:gap-4">
        <label class="form-control md:w-1/2">
          <span class="label-text">Departamento</span>
          <select
            id="filtro-departamento"
            class="select select-bordered select-sm"></select>
        </label>
        <label class="form-control md:w-1/2">
          <span class="label-text">Status</span>
          <select id="filtro-status" class="select select-bordered select-sm"
          ></select>
        </label>
        <div class="flex gap-4">
          <label class="form-control w-32">
            <span class="label-text">Ano InÃ­cio</span>
            <input
              type="number"
              id="filtro-inicio"
              class="input input-bordered input-sm"
              min="1900"
              max="2100"
            />
          </label>
          <label class="form-control w-32">
            <span class="label-text">Ano Fim</span>
            <input
              type="number"
              id="filtro-fim"
              class="input input-bordered input-sm"
              min="1900"
              max="2100"
            />
          </label>
        </div>
      </div>
    </div>
    <div class="stats shadow mt-6 md:mt-0 w-full md:w-1/3">
      <div class="stat">
        <div class="stat-title">Total de Projetos</div>
        <div class="stat-value text-primary" id="project-counter">0</div>
      </div>
    </div>
  </div>

  <span id="mensagem-periodo-invalido" class="text-error text-sm hidden">
    Ano inicial nÃ£o pode ser maior que o final.
  </span>

  <div id="lista-projetos" class="space-y-6"></div>

  <div id="no-projects-message" class="hidden text-center py-12">
    <div class="text-6xl mb-4">ðŸ“‚</div>
    <p class="text-xl font-semibold">
      Nenhum projeto encontrado com os filtros selecionados.
    </p>
  </div>
</section>

<script is:inline define:vars={{ projetosData, ordemInicial, agenciaInicial }}>
  let allProjects = projetosData || [];
  let currentSort = ordemInicial || "titulo";
  let currentOrder = "asc";
  let currentFilter = agenciaInicial || "";

  function escapeHtml(text) {
    if (!text) return "";
    const div = document.createElement("div");
    div.textContent = text;
    return div.innerHTML;
  }

  function preencherDepartamentosEStatus() {
    const selectDep = document.getElementById("filtro-departamento");
    const selectStatus = document.getElementById("filtro-status");
    if (!selectDep || !selectStatus) return;

    const departamentos = [
      ...new Set(allProjects.map((p) => p.departamento).filter(Boolean)),
    ].sort();
    const statusList = [
      ...new Set(allProjects.map((p) => p.status).filter(Boolean)),
    ].sort();

    selectDep.innerHTML =
      '<option value="">Todos</option>' +
      departamentos.map((d) => `<option>${escapeHtml(d)}</option>`).join("");
    selectStatus.innerHTML =
      '<option value="">Todos</option>' +
      statusList.map((s) => `<option>${escapeHtml(s)}</option>`).join("");
  }

  function getPeriodoAno(periodo) {
    const match = (periodo || "").match(/\d{4}/g);
    return match ? match.map(Number) : [];
  }

  function sortProjects(projects, ordem) {
    return [...projects].sort((a, b) => {
      const valA = (a[ordem] ?? "").toString();
      const valB = (b[ordem] ?? "").toString();

      if (ordem === "periodo") {
        const anoA = getPeriodoAno(valA)[0] || 0;
        const anoB = getPeriodoAno(valB)[0] || 0;
        return currentOrder === "asc" ? anoA - anoB : anoB - anoA;
      }

      return currentOrder === "asc"
        ? valA.localeCompare(valB, "pt-BR")
        : valB.localeCompare(valA, "pt-BR");
    });
  }

  function filterProjects(projects) {
    const agencia = document.getElementById("filtro-agencia")?.value || "";
    const docente = document.getElementById("filtro-docente")?.value || "";
    const inicio = parseInt(document.getElementById("filtro-inicio")?.value);
    const fim = parseInt(document.getElementById("filtro-fim")?.value);
    const mensagem = document.getElementById("mensagem-periodo-invalido");
    const status = document.getElementById("filtro-status")?.value || "";
    const departamento =
      document.getElementById("filtro-departamento")?.value || "";

    if (inicio && fim && inicio > fim) {
      mensagem.classList.remove("hidden");
      return [];
    } else {
      mensagem.classList.add("hidden");
    }

    return projects.filter((p) => {
      if (agencia && p.agencia !== agencia) return false;
      if (docente && p.docente !== docente) return false;
      if (status && p.status !== status) return false;
      if (departamento && p.departamento !== departamento) return false;
      const anos = getPeriodoAno(p.periodo);
      if (inicio && (!anos[0] || anos[0] < inicio)) return false;
      if (fim && (!anos[1] || anos[1] > fim)) return false;
      return true;
    });
  }

  function renderProject(p, index) {
    const id = `extra-info-${index}`;
    const mostrar = p.mostrar || [];

    function mostrarCampo(campo) {
      return mostrar.length === 0 || mostrar.includes(campo);
    }

    return `
      <article class="card bg-base-100 shadow border border-base-300">
        <div class="card-body">
          <h2 class="card-title text-primary">${escapeHtml(p.titulo)}</h2>
          ${mostrarCampo("docente") ? `<p><strong>Docente:</strong> ${escapeHtml(p.docente)}</p>` : ""}
          ${mostrarCampo("departamento") ? `<p><strong>Departamento:</strong> ${escapeHtml(p.departamento)}</p>` : ""}
          ${mostrarCampo("associados") && p.associados ? `<p><strong>Pesquisadores Associados:</strong> ${escapeHtml(Array.isArray(p.associados) ? p.associados.join(", ") : p.associados)}</p>` : ""}
          ${mostrarCampo("status") ? `<p><strong>Status:</strong> ${escapeHtml(p.status)}</p>` : ""}
          ${mostrarCampo("periodo") ? `<p><strong>PerÃ­odo:</strong> ${escapeHtml(p.periodo)}</p>` : ""}
          ${mostrarCampo("agencia") ? `<p><strong>AgÃªncia:</strong> ${escapeHtml(p.agencia)}</p>` : ""}
          ${mostrarCampo("processo") ? `<p><strong>Processo:</strong> ${escapeHtml(p.processo)}</p>` : ""}
          ${mostrarCampo("resumo") ? `<p class="mt-2 text-base-content/80"><strong>Resumo:</strong> ${escapeHtml(p.resumo)}</p>` : ""}
          ${
            p.publico_alvo || p.resultados || p.links
              ? `
            <button class="btn btn-sm btn-link" onclick="toggleExtra('${id}', this)">Mostrar mais</button>
            <div id="${id}" class="hidden mt-2">
              ${p.publico_alvo ? `<p><strong>PÃºblico-alvo:</strong> ${escapeHtml(p.publico_alvo)}</p>` : ""}
              ${p.resultados ? `<p><strong>Resultados:</strong> ${escapeHtml(p.resultados)}</p>` : ""}
              ${p.links ? `<p><strong>Links:</strong> <a href="${p.links}" target="_blank" class="link">${escapeHtml(p.links)}</a></p>` : ""}
            </div>`
              : ""
          }
        </div>
      </article>
    `;
  }

  function renderProjects() {
    const list = document.getElementById("lista-projetos");
    const noResults = document.getElementById("no-projects-message");
    const filtered = filterProjects(allProjects);
    const sorted = sortProjects(filtered, currentSort);

    list.innerHTML = sorted.map((p, i) => renderProject(p, i)).join("");
    document.getElementById("project-counter").textContent = sorted.length;
    noResults.classList.toggle("hidden", sorted.length > 0);
    atualizarBotoes(currentSort, currentOrder);
  }

  function ordenarProjetos(criterio) {
    if (currentSort === criterio) {
      currentOrder = currentOrder === "asc" ? "desc" : "asc";
    } else {
      currentSort = criterio;
      currentOrder = "asc";
    }
    renderProjects();
  }

  function atualizarBotoes(criterioAtivo, ordemAtual) {
    const icones = {
      asc: `<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" /></svg>`,
      desc: `<svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>`,
    };

    document.querySelectorAll("#ordenacao-botoes button").forEach((btn) => {
      const criterio = btn.getAttribute("onclick")?.match(/'([^']+)'/)?.[1];
      const label =
        criterio === "titulo"
          ? "TÃ­tulo"
          : criterio === "docente"
            ? "Docente"
            : "PerÃ­odo";

      if (criterio === criterioAtivo) {
        btn.className = "btn btn-sm btn-primary";
        btn.innerHTML = `${label}${icones[ordemAtual]}`;
      } else {
        btn.className = "btn btn-sm btn-outline";
        btn.innerHTML = label;
      }
    });
  }

  function preencherDocentes() {
    const select = document.getElementById("filtro-docente");
    if (!select) return;
    const docentes = [
      ...new Set(allProjects.map((p) => p.docente).filter(Boolean)),
    ].sort();
    select.innerHTML =
      '<option value="">Todos</option>' +
      docentes.map((d) => `<option>${escapeHtml(d)}</option>`).join("");
  }

  function toggleExtra(id, btn) {
    const el = document.getElementById(id);
    if (!el) return;

    const expanded = !el.classList.contains("hidden");
    el.classList.toggle("hidden");
    btn.textContent = expanded ? "Mostrar mais" : "Mostrar menos";
  }

  document.addEventListener("DOMContentLoaded", () => {
    preencherDocentes();
    preencherDepartamentosEStatus();
    [
      "filtro-agencia",
      "filtro-docente",
      "filtro-inicio",
      "filtro-fim",
      "filtro-status",
      ,
      "filtro-departamento",
    ].forEach((id) => {
      document.getElementById(id)?.addEventListener("input", renderProjects);
    });
    renderProjects();
  });

  window.ordenarProjetos = ordenarProjetos;
  window.toggleExtra = toggleExtra;
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  #filtro-inicio,
  #filtro-fim {
    margin-top: 0.25rem;
    font-size: 0.875rem;
    width: 100%;
  }

  #mensagem-periodo-invalido {
    margin-left: 0.5rem;
  }
</style>
