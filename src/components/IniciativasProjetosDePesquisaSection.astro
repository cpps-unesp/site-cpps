---
const { textos, iniciativas, projetos = [] } = Astro.props;

// Usar os dados do JSON fornecido
const projetosData = iniciativas?.projetosLista || projetos || [];

console.log("Total de projetos:", projetosData.length);
console.log("Estrutura do primeiro projeto:", Object.keys(projetosData[0] || {}));

// Obter par√¢metros iniciais da URL para estado inicial
const url = new URL(Astro.request.url);
const ordemValida = ["titulo", "docente", "periodo"];
const ordemParam = url.searchParams.get("ordem") ?? "";
const agenciaParam = url.searchParams.get("agencia") ?? "";

// Determinar estado inicial
const ordemInicial = ordemValida.includes(ordemParam) ? ordemParam : "titulo";
const agenciaInicial = agenciaParam || "";

// Fun√ß√£o para escapar HTML (movida para o servidor)
const escapeHtml = (text: any) => {
  if (!text) return '';
  return text.toString()
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
};
---

<section class="max-w-5xl mx-auto px-4 py-16 space-y-8">
  <!-- Cabe√ßalho -->
  <div class="text-center mb-8">
    <h1 class="text-4xl font-bold text-primary mb-4">
      {iniciativas?.projetosDePesquisa ?? "Projetos de Pesquisa"}
    </h1>
    <p class="text-lg text-base-content max-w-3xl mx-auto">
      {iniciativas?.descricaoProjetosDePesquisa ?? "Projetos desenvolvidos por docentes e associados ao CPPS."}
    </p>
  </div>
  <!-- Estat√≠sticas -->
  <div class="stats shadow w-full mb-8">
    <div class="stat">
      <div class="stat-title">Total de Projetos</div>
      <div class="stat-value text-primary" id="project-counter">{projetosData.length}</div>
    </div>
    <div class="stat">
      <div class="stat-title">Ordena√ß√£o Atual</div>
      <div class="stat-value text-sm" id="current-sort">
        {ordemInicial === 'titulo' ? 'Por T√≠tulo' : 
         ordemInicial === 'docente' ? 'Por Docente' : 
         'Por Per√≠odo'}
      </div>
    </div>
  </div>

  <!-- Seletor de ordena√ß√£o melhorado -->
  <div class="flex flex-wrap gap-4 items-center justify-between mb-8 p-4 bg-base-200 rounded-lg">
    <div class="flex items-center gap-2">
      <span class="font-semibold text-base-content">
        {iniciativas?.ordenarPor ?? "Ordenar por"}:
      </span>      <div class="btn-group">
        <button 
          class={`btn btn-sm ${ordemInicial === 'titulo' ? 'btn-active btn-primary' : 'btn-outline'}`}
          onclick="ordenarProjetos('titulo')"
        >
          {iniciativas?.porTitulo ?? "T√≠tulo"}
        </button>
        <button 
          class={`btn btn-sm ${ordemInicial === 'docente' ? 'btn-active btn-primary' : 'btn-outline'}`}
          onclick="ordenarProjetos('docente')"
        >
          {iniciativas?.porDocente ?? "Docente"}
        </button>
        <button 
          class={`btn btn-sm ${ordemInicial === 'periodo' ? 'btn-active btn-primary' : 'btn-outline'}`}
          onclick="ordenarProjetos('periodo')"
        >
          {iniciativas?.porPeriodo ?? "Per√≠odo"}
        </button>
      </div>
    </div>
    
    <!-- Filtro adicional -->
    <div class="flex items-center gap-2">
      <span class="font-semibold text-base-content">Filtrar:</span>      <select class="select select-bordered select-sm" id="filtro-agencia">
        <option value="" selected={!agenciaInicial}>Todas as Ag√™ncias</option>
        <option value="FAPESP" selected={agenciaInicial === 'FAPESP'}>FAPESP</option>
        <option value="CNPq" selected={agenciaInicial === 'CNPq'}>CNPq</option>
        <option value="CAPES" selected={agenciaInicial === 'CAPES'}>CAPES</option>
      </select>
    </div>
  </div>  <!-- Lista de projetos melhorada -->
  <div id="lista-projetos" class="space-y-6">
    <!-- Projetos ser√£o inseridos aqui via JavaScript -->
  </div>

  <!-- Mensagem quando n√£o h√° projetos -->
  <div id="no-projects-message" class="text-center py-12 hidden">
    <div class="text-6xl mb-4">üìö</div>
    <h3 class="text-xl font-semibold text-base-content mb-2">Nenhum projeto encontrado</h3>
    <p class="text-base-content/60">N√£o h√° projetos dispon√≠veis no momento.</p>
  </div>
</section>

<!-- Dados para o cliente -->
<script is:inline define:vars={{ projetosData, ordemInicial, agenciaInicial }}>
  console.log("Dados dos projetos:", projetosData);
  // Estado global da aplica√ß√£o
  let allProjects = projetosData || [];
  let currentSort = ordemInicial || 'titulo';
  let currentFilter = agenciaInicial || '';

  // Fun√ß√£o para escapar HTML
  function escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // Fun√ß√£o para ordenar projetos
  function sortProjects(projects, ordem) {
    return [...projects].sort((a, b) => {
      // Get the values to compare, handling null/undefined
      const valorA = (a[ordem] ?? "").toString().trim();
      const valorB = (b[ordem] ?? "").toString().trim();
      
      if (ordem === "periodo") {
        // Extract years from period strings like "2020‚Äì2024" or "2020-2024"
        const anoA = parseInt(valorA.match(/(\d{4})/)?.[1] || "0");
        const anoB = parseInt(valorB.match(/(\d{4})/)?.[1] || "0");
        
        // Sort by starting year (descending - most recent first)
        return anoB - anoA;
      }

      // For other sorting criteria, use case-insensitive comparison
      return valorA.toLowerCase().localeCompare(valorB.toLowerCase(), 'pt-BR', { sensitivity: 'base' });
    });
  }

  // Fun√ß√£o para filtrar projetos por ag√™ncia
  function filterProjects(projects, agencia) {
    if (!agencia) return projects;
    return projects.filter(proj => proj.agencia === agencia);
  }

  // Fun√ß√£o para renderizar um projeto
  function renderProject(proj, index) {
    const apoioHtml = Array.isArray(proj.apoioCentro) && proj.apoioCentro.length > 0 
      ? `<div class="mt-4">
           <h4 class="font-semibold text-primary mb-2">Apoios do CPPS:</h4>
           <ul class="list-disc list-inside space-y-1 text-sm">
             ${proj.apoioCentro.map(item => `<li class="text-base-content/80">${escapeHtml(item)}</li>`).join('')}
           </ul>
         </div>`
      : '';

    return `
      <article class="card bg-base-100 shadow-lg border border-base-300 hover:shadow-xl transition-shadow duration-300">
        <div class="card-body">
          <!-- Cabe√ßalho do projeto -->
          <div class="flex flex-wrap items-start justify-between gap-4 mb-4">
            <div class="flex-1">
              <div class="flex items-center gap-2 mb-2">
                <span class="badge badge-primary badge-sm">#${index + 1}</span>
                <span class="badge badge-outline badge-sm">${escapeHtml(proj.agencia)}</span>
                <span class="badge badge-ghost badge-sm">${escapeHtml(proj.periodo)}</span>
              </div>
              <h2 class="card-title text-xl text-primary mb-2">
                ${escapeHtml(proj.titulo)}
              </h2>
              <p class="text-base-content font-medium">
                <span class="text-sm text-neutral-500">Docente respons√°vel:</span> ${escapeHtml(proj.docente)}
              </p>
            </div>
            <button class="btn btn-circle btn-ghost btn-sm" onclick="toggleDetails('projeto-${index}')">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
          </div>

          <!-- Resumo sempre vis√≠vel -->
          <div class="mb-4">
            <h3 class="font-semibold text-base-content mb-2">Resumo:</h3>
            <p class="text-sm text-base-content/80 line-clamp-3">
              ${escapeHtml(proj.resumo)}
            </p>
          </div>

          <!-- Detalhes expans√≠veis -->
          <div id="projeto-${index}" class="hidden space-y-4 pt-4 border-t border-base-300">
            <div class="grid md:grid-cols-2 gap-4">
              <div class="space-y-2">
                <p><strong class="text-primary">Processo:</strong> ${escapeHtml(proj.processo)}</p>
                <p><strong class="text-primary">Natureza:</strong> ${escapeHtml(proj.natureza)}</p>
                <p><strong class="text-primary">Valor:</strong> ${escapeHtml(proj.valor)}</p>
              </div>
              <div class="space-y-2">
                <p><strong class="text-primary">Pesquisadores Associados:</strong> ${escapeHtml(proj.associados)}</p>
              </div>
            </div>
            ${apoioHtml}
          </div>
        </div>
      </article>
    `;
  }

  // Fun√ß√£o para renderizar a lista de projetos
  function renderProjects() {
    const filteredProjects = filterProjects(allProjects, currentFilter);
    const sortedProjects = sortProjects(filteredProjects, currentSort);
    
    const container = document.getElementById('lista-projetos');
    const noProjectsMessage = document.getElementById('no-projects-message');
    
    if (sortedProjects.length === 0) {
      container.innerHTML = '';
      noProjectsMessage.classList.remove('hidden');
    } else {
      noProjectsMessage.classList.add('hidden');
      container.innerHTML = sortedProjects.map((proj, index) => renderProject(proj, index)).join('');
    }
    
    // Atualizar contador
    updateProjectCounter(sortedProjects.length);
    
    // Atualizar label de ordena√ß√£o
    updateSortLabel(currentSort);
  }

  // Fun√ß√£o para alternar detalhes do projeto
  function toggleDetails(elementId) {
    const element = document.getElementById(elementId);
    const button = element?.previousElementSibling?.querySelector('button[onclick*="toggleDetails"]');
    
    if (element) {
      element.classList.toggle('hidden');
      if (button) {
        const svg = button.querySelector('svg');
        if (svg) {
          svg.style.transform = element.classList.contains('hidden') ? 'rotate(0deg)' : 'rotate(180deg)';
        }
      }
    }
  }

  // Fun√ß√£o para ordenar projetos (chamada pelos bot√µes)
  function ordenarProjetos(criterio) {
    currentSort = criterio;
    updateURL();
    atualizarBotoes(criterio);
    renderProjects();
  }

  // Fun√ß√£o para filtrar por ag√™ncia
  function filtrarPorAgencia() {
    const filtroAgencia = document.getElementById('filtro-agencia').value;
    currentFilter = filtroAgencia;
    updateURL();
    renderProjects();
  }

  // Fun√ß√£o para atualizar URL sem recarregar a p√°gina
  function updateURL() {
    const url = new URL(window.location);
    
    if (currentSort && currentSort !== 'titulo') {
      url.searchParams.set('ordem', currentSort);
    } else {
      url.searchParams.delete('ordem');
    }
    
    if (currentFilter) {
      url.searchParams.set('agencia', currentFilter);
    } else {
      url.searchParams.delete('agencia');
    }
    
    history.replaceState(null, '', url.toString());
  }

  // Fun√ß√£o para atualizar contador de projetos
  function updateProjectCounter(count) {
    const statValue = document.getElementById('project-counter');
    if (statValue) {
      statValue.textContent = count;
    }
  }

  // Fun√ß√£o para atualizar label de ordena√ß√£o
  function updateSortLabel(criterio) {
    const sortLabel = document.getElementById('current-sort');
    if (sortLabel) {
      const labels = {
        'titulo': 'Por T√≠tulo',
        'docente': 'Por Docente',
        'periodo': 'Por Per√≠odo'
      };
      sortLabel.textContent = labels[criterio] || 'Por T√≠tulo';
    }
  }

  // Fun√ß√£o para atualizar visual dos bot√µes
  function atualizarBotoes(criterioAtivo) {
    document.querySelectorAll('.btn-group button').forEach(btn => {
      const criterio = btn.getAttribute('onclick')?.match(/'([^']+)'/)?.[1];
      if (criterio === criterioAtivo) {
        btn.className = 'btn btn-sm btn-active btn-primary';
      } else {
        btn.className = 'btn btn-sm btn-outline';
      }
    });
  }  // Inicializa√ß√£o
  document.addEventListener('DOMContentLoaded', function() {
    // Atualizar bot√µes com o estado inicial
    atualizarBotoes(currentSort);
    
    // Configurar o filtro inicial e adicionar listener
    const filtroAgencia = document.getElementById('filtro-agencia');
    if (filtroAgencia) {
      if (currentFilter) {
        filtroAgencia.value = currentFilter;
      }
      filtroAgencia.addEventListener('change', filtrarPorAgencia);
    }

    // Renderizar projetos inicialmente
    renderProjects();
  });

  // Tornar fun√ß√µes globais
  window.toggleDetails = toggleDetails;
  window.ordenarProjetos = ordenarProjetos;
  window.filtrarPorAgencia = filtrarPorAgencia;
</script>


<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>