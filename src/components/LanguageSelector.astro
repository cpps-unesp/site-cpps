---
import { routeTranslations } from '../i18n/routes';
import { getTranslatedPath } from '../utils/getTranslatedPath';
import type { SupportedLang } from '../i18n/routeTranslations';

const { lang = 'pt' } = Astro.props as { lang: SupportedLang };

const languages: { code: SupportedLang; label: string }[] = [
  { code: 'pt', label: 'Português' },
  { code: 'en', label: 'English' },
  { code: 'es', label: 'Español' },
];

// 🟩 Pega o caminho atual, removendo o lang
const pathParts: string[] = Astro.url.pathname.split('/').filter(Boolean);
const currentPath: string = pathParts.slice(1).join('/');

// 🟩 Função para encontrar a chave original
function findOriginalKey(path: string): keyof typeof routeTranslations | undefined {
  return (Object.keys(routeTranslations) as Array<keyof typeof routeTranslations>)
    .find((key) => Object.values(routeTranslations[key]).includes(path));
}

const originalKey = findOriginalKey(currentPath);
---

<div class="dropdown dropdown-hover dropdown-end w-full md:w-auto">
  <label tabindex="0" class="flex items-center justify-between md:justify-start cursor-pointer hover:text-gray-300 w-full md:w-auto">
    <span>🌐 Idioma</span>
    <svg class="ml-1 w-3 h-3 fill-current" viewBox="0 0 20 20">
      <path d="M5.25 7.75L10 12.5l4.75-4.75" />
    </svg>
  </label>

  <ul class="dropdown-content menu p-0 shadow bg-base-100 text-base-content rounded-sm w-full md:w-40 -translate-y-2 
              transition transform scale-95 opacity-0 group-hover:opacity-100 group-hover:scale-100 duration-150 ease-out">
    {languages.map((l) => {
      let href = `/${l.code}/`;

      if (originalKey) {
        const translatedPath = getTranslatedPath(originalKey, l.code);
        href = `/${l.code}/${translatedPath}`;
      }

      return (
        <li>
          <a href={href} class="hover:bg-base-200">
            {l.label}
          </a>
        </li>
      );
    })}
  </ul>
</div>
